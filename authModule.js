//  AUTH MODULE - H·ªÜ TH·ªêNG ƒêƒÇNG NH·∫¨P/ƒêƒÇNG K√ù HO√ÄN CH·ªàNH
// LocalStorage + Hashing + Session + Validation + UI Toggle

const USERS_KEY = 'users';                               //  KEY: L∆∞u danh s√°ch users
const SESSION_KEY = 'session';                           //  KEY: L∆∞u session hi·ªán t·∫°i
const EXPIRY_HOURS = 1;                                  // SESSION h·∫øt h·∫°n: 1 gi·ªù

//  PASSWORD HASHER: CLOSURE + SALT + BASE64 (SIMPLE SECURITY)
const createHasher = () => {
    const salt = 'secretSalt';                           //  SALT: B√≠ m·∫≠t (hardcode cho demo)
    return (password) => btoa(password + salt);          //  HASH: password + salt ‚Üí Base64
};

const hashPassword = createHasher();                     //  FACTORY: T·∫°o hasher instance

//  VALIDATION FUNCTIONS: KI·ªÇM TRA INPUT
// VALIDATE PASSWORD: ‚â•6 k√Ω t·ª±, KH√îNG kho·∫£ng tr·∫Øng
function validatePassword(password) {
    return password.length >= 6 && !/\s/.test(password); // REGEX: \s = whitespace
}

// VALIDATE USERNAME: Kh√¥ng r·ªóng + Ch∆∞a t·ªìn t·∫°i
function validateUsername(username, users) {
    return username.trim() !== '' && !users.find(u => u.username === username);
}

//  SETUP AUTH FORMS: BIND EVENTS CHO LOGIN/REGISTER
// G·ªåI T·ª™: app.js ‚Üí DOMContentLoaded
export function setupAuthForms() {
    // ‚ïê‚ïê‚ïê GET ELEMENTS ‚ïê‚ïê‚ïê
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    const switchToRegister = document.getElementById('switchToRegister');
    const switchToLogin = document.getElementById('switchToLogin');

    // ‚ïê‚ïê‚ïê EVENT: SWITCH LOGIN ‚Üî REGISTER ‚ïê‚ïê‚ïê
    switchToRegister.addEventListener('click', () => {
        document.getElementById('login-form').style.display = 'none';     // HIDE: Login
        document.getElementById('register-form').style.display = 'block'; // SHOW: Register
    });

    switchToLogin.addEventListener('click', () => {
        document.getElementById('register-form').style.display = 'none';  // HIDE: Register
        document.getElementById('login-form').style.display = 'block';    // SHOW: Login
    });

    // ‚ïê‚ïê‚ïê EVENT: REGISTER FORM SUBMIT ‚ïê‚ïê‚ïê
    registerForm.addEventListener('submit', async (e) => {
        e.preventDefault();                              // NGƒÇN: Reload page
        
        // ‚ïê‚ïê‚ïê GET INPUT VALUES ‚ïê‚ïê‚ïê
        const username = document.getElementById('regUsername').value.trim();
        const password = document.getElementById('regPassword').value;
        const confirm = document.getElementById('regConfirmPassword').value;
        const errorDiv = document.getElementById('regError');
        errorDiv.textContent = '';                       // CLEAR: L·ªói c≈©

        // ‚ïê‚ïê‚ïê VALIDATE ‚ïê‚ïê‚ïê
        const users = getUsers();
        if (!validateUsername(username, users)) {
            errorDiv.textContent = 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ t·ªìn t·∫°i.';
            return;
        }
        if (!validatePassword(password)) {
            errorDiv.textContent = 'M·∫≠t kh·∫©u ph·∫£i √≠t nh·∫•t 6 k√Ω t·ª±, kh√¥ng ch·ª©a kho·∫£ng tr·∫Øng.';
            return;
        }
        if (password !== confirm) {
            errorDiv.textContent = 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.';
            return;
        }

        // ‚ïê‚ïê‚ïê SAVE NEW USER ‚ïê‚ïê‚ïê
        users.push({ username, password: hashPassword(password) }); // HASH: M√£ h√≥a
        saveUsers(users);
        alert('ƒêƒÉng k√Ω th√†nh c√¥ng!');
        switchToLogin.click();                           // AUTO: Chuy·ªÉn sang Login
    });

    // ‚ïê‚ïê‚ïê EVENT: LOGIN FORM SUBMIT ‚ïê‚ïê‚ïê
    loginForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // ‚ïê‚ïê‚ïê GET INPUT VALUES ‚ïê‚ïê‚ïê
        const username = document.getElementById('loginUsername').value.trim();
        const password = document.getElementById('loginPassword').value;
        const errorDiv = document.getElementById('loginError');
        errorDiv.textContent = '';

        //  FAKE DELAY: 1.5s (m√¥ ph·ªèng API call)
        await new Promise(resolve => setTimeout(resolve, 1500));

        // ‚ïê‚ïê‚ïê AUTHENTICATE ‚ïê‚ïê‚ïê
        const users = getUsers();
        const user = users.find(u => 
            u.username === username && 
            u.password === hashPassword(password)        // SO S√ÅNH HASH
        );
        
        if (user) {
            // ‚ïê‚ïê‚ïê CREATE SESSION ‚ïê‚ïê‚ïê
            const expiry = new Date(Date.now() + EXPIRY_HOURS * 60 * 60 * 1000).toISOString();
            localStorage.setItem(SESSION_KEY, JSON.stringify({ username, expiry }));
            window.location.reload();                    // RELOAD: ‚Üí Dashboard
        } else {
            errorDiv.textContent = 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u sai.';
        }
    });
}

//  USERS CRUD: LOCALSTORAGE HELPER FUNCTIONS
function getUsers() {
    return JSON.parse(localStorage.getItem(USERS_KEY)) || []; // DEFAULT: []
}

function saveUsers(users) {
    localStorage.setItem(USERS_KEY, JSON.stringify(users));
}

//  CHECK LOGIN STATUS: KI·ªÇM TRA SESSION C√íN H·ª¢P L·ªÜ?
// G·ªåI T·ª™: app.js ‚Üí DOMContentLoaded
export function isLoggedIn() {
    const session = localStorage.getItem(SESSION_KEY);
    if (!session) return false;                          // KH√îNG c√≥ session
    
    const { expiry } = JSON.parse(session);
    if (new Date(expiry) < new Date()) {                 // H·∫æT H·∫†N
        logout();                                        // AUTO: Clear
        return false;
    }
    return true;                                         // VALID SESSION
}

//  LOGOUT: X√ìA SESSION
// G·ªåI T·ª™: app.js ‚Üí Logout button
export function logout() {
    localStorage.removeItem(SESSION_KEY);                // X√ìA: Session
    console.log('üëã User logged out');
}