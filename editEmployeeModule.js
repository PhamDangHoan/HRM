// SEARCH ‚Üí LOAD FORM ‚Üí DYNAMIC DROPDOWNS ‚Üí VALIDATE ‚Üí UPDATE

import * as EmployeeDb from './employeeDbModule.js';      //  CRUD Employee
import * as Department from './departmentModule.js';     //  Department dropdown
import * as Position from './positionModule.js';         //  Position dropdown
import { refreshDashboard } from './app.js';             //  Auto refresh UI

//  INIT: KH·ªûI T·∫†O MODULE (G·ªåI T·ª™ app.js)
export function init(container) {
    console.log('‚úèÔ∏è Edit module initializing...');
    
    // ‚ïê‚ïê‚ïê B∆Ø·ªöC 1: SEARCH FORM ‚ïê‚ïê‚ïê
    const searchForm = document.createElement('form');
    searchForm.innerHTML = `
        <h2>üîç T√¨m Nh√¢n vi√™n ƒë·ªÉ S·ª≠a</h2>
        <input type="number" id="empId" placeholder="Nh·∫≠p ID Nh√¢n vi√™n" required>
        <button type="submit">üîé T√¨m</button>
    `;
    container.appendChild(searchForm);

    // ‚ïê‚ïê‚ïê B∆Ø·ªöC 2: SEARCH EVENT ‚ïê‚ïê‚ïê
    searchForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const id = parseInt(searchForm.querySelector('#empId').value);
        
        try {
            // VALIDATE: Employee t·ªìn t·∫°i
            const emp = EmployeeDb.getEmployeeById(id);
            console.log(`‚úÖ Found: ${emp.name} (ID: ${id})`);
            
            // CLEAR & LOAD EDIT FORM
            container.innerHTML = '';
            const editForm = createEditForm(emp);
            container.appendChild(editForm);
            
            // ‚ïê‚ïê‚ïê B∆Ø·ªöC 3: EDIT SUBMIT ‚ïê‚ïê‚ïê
            editForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const updated = collectFormData(editForm, emp);
                
                if (confirm(`‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ${updated.name}?`)) {
                    EmployeeDb.updateEmployee(updated);
                    alert('‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!');
                    refreshDashboard();                      //  BACK TO LIST
                }
            });
            
        } catch (e) {
            alert('‚ùå ' + e.message);
            console.error('‚ùå Edit search error:', e);
        }
    });
    
    console.log('‚úÖ Edit module loaded');
}

//  CREATE EDIT FORM: DYNAMIC DROPDOWNS + PRE-FILLED
function createEditForm(emp) {
    const form = document.createElement('form');
    form.innerHTML = `
        <h2>‚úèÔ∏è S·ª≠a Nh√¢n vi√™n: <strong>${emp.name}</strong></h2>
        
        <!-- T√äN -->
        <label>T√™n:</label>
        <input type="text" id="name" value="${emp.name}" required>
        
        <!-- PH√íNG BAN - DYNAMIC SELECT -->
        <label>Ph√≤ng ban:</label>
        <select id="departmentId" required>
            ${Department.getAllDepartments().map(d => `
                <option value="${d.id}" ${d.id === emp.departmentId ? 'selected' : ''}>
                    ${d.name} (${(d.level || 1).toFixed(1)}x)
                </option>
            `).join('')}
        </select>
        
        <!-- V·ªä TR√ç - DYNAMIC SELECT -->
        <label>V·ªã tr√≠:</label>
        <select id="positionId" required>
            ${Position.getAllPositions().map(p => `
                <option value="${p.id}" ${p.id === emp.positionId ? 'selected' : ''}>
                    ${p.title}
                </option>
            `).join('')}
        </select>
        
        <!-- L∆Ø∆†NG -->
        <label>L∆∞∆°ng:</label>
        <input type="number" id="salary" value="${emp.salary}" min="1" required>
        
        <!-- NG√ÄY V√ÄO -->
        <label>Ng√†y v√†o:</label>
        <input type="date" id="hireDate" value="${emp.hireDate}" required>
        
        <!-- BONUS/DEDUCTION (READONLY) -->
        <p><small>üí∞ Th∆∞·ªüng: ${emp.bonus.toLocaleString()} | üìâ Ph·∫°t: ${emp.deduction.toLocaleString()}</small></p>
        
        <button type="submit">‚úÖ C·∫≠p nh·∫≠t</button>
        <button type="button" onclick="refreshDashboard()">üîô Quay l·∫°i</button>
    `;
    return form;
}

//  COLLECT FORM DATA: VALIDATE + FORMAT
function collectFormData(form, originalEmp) {
    return {
        id: originalEmp.id,                                  // KEEP: Original ID
        name: form.querySelector('#name').value.trim(),      // TRIM: Remove spaces
        departmentId: parseInt(form.querySelector('#departmentId').value),
        positionId: parseInt(form.querySelector('#positionId').value),
        salary: parseFloat(form.querySelector('#salary').value),
        hireDate: form.querySelector('#hireDate').value,     // YYYY-MM-DD
        bonus: originalEmp.bonus,                            // KEEP: Kh√¥ng s·ª≠a ·ªü ƒë√¢y
        deduction: originalEmp.deduction                     // KEEP: Kh√¥ng s·ª≠a ·ªü ƒë√¢y
    };
}