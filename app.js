// T·ªîNG H·ª¢P + ROUTING + ERROR HANDLING + GLOBAL FUNCTIONS
import * as Auth from './authModule.js';                    // X√ÅC TH·ª∞C NG∆Ø·ªúI D√ôNG
import * as EmployeeDb from './employeeDbModule.js';       // DATABASE NH√ÇN VI·ªÜN
import * as EmployeeManagement from './employeeManagementModule.js';  // QU·∫¢N L√ù NH√ÇN VI·ªÜN
import * as SearchEmployee from './searchEmployeeModule.js';         //  T√åM KI·∫æM NH√ÇN VI·ªÜN
import * as Department from './departmentModule.js';       //  PH√íNG BAN
import * as Position from './positionModule.js';           // V·ªä TR√ç
import * as Salary from './salaryModule.js';               //  L∆Ø∆†NG TH∆Ø·ªûNG
import * as Attendance from './attendanceModule.js';       //  CH·∫§M C√îNG
import * as Leave from './leaveModule.js';                 //  NGH·ªà PH√âP
import * as Performance from './performanceModule.js';     //  ƒê√ÅNH GI√Å HI·ªÜU SU·∫§T

//  MODULE REGISTRY: DANH S√ÅCH T·∫§T C·∫¢ MODULES (ROUTING MAP)
const modules = {
    employeeManagement: EmployeeManagement,     // ROUTE: /employee-management ‚Üí B·∫£ng danh s√°ch NV
    searchEmployee: SearchEmployee,             // ROUTE: /search ‚Üí T√¨m ki·∫øm NV
    department: Department,                     // ROUTE: /department ‚Üí Qu·∫£n l√Ω ph√≤ng ban
    position: Position,                         // ROUTE: /position ‚Üí Qu·∫£n l√Ω v·ªã tr√≠
    salary: Salary,                             // ROUTE: /salary ‚Üí Qu·∫£n l√Ω l∆∞∆°ng
    attendance: Attendance,                     // ROUTE: /attendance ‚Üí Ch·∫•m c√¥ng
    leave: Leave,                               // ROUTE: /leave ‚Üí Ngh·ªâ ph√©p
    performance: Performance                    // ROUTE: /performance ‚Üí ƒê√°nh gi√°
};

//  GLOBAL ERROR HANDLER: B·∫ÆT M·ªåI L·ªñI TRONG ·ª®NG D·ª§NG
window.onerror = function (message, source, lineno, colno, error) {
    // LOG: Chi ti·∫øt l·ªói cho developer
    console.error('Global error:', message);
    // ALERT: Th√¥ng b√°o th√¢n thi·ªán cho user
    alert('ƒê√£ x·∫£y ra l·ªói: ' + message);
};

//  MAIN INITIALIZATION: CH·∫†Y KHI PAGE LOAD XONG
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üéâ App starting...');
    
    // B∆Ø·ªöC 1: SETUP AUTH FORMS (login/register UI)
    Auth.setupAuthForms();
    
    // B∆Ø·ªöC 2: CHECK LOGIN STATUS ‚Üí SHOW DASHBOARD HO·∫∂C LOGIN FORM
    if (Auth.isLoggedIn()) {
        console.log('‚úÖ User logged in ‚Üí Show Dashboard');
        showDashboard();                             // USER ƒê√É LOGIN ‚Üí DASHBOARD
    } else {
        console.log('üîê User not logged in ‚Üí Show Login');
        // SHOW: Auth container + Login form
        document.getElementById('auth-container').style.display = 'block';
        document.getElementById('login-form').style.display = 'block';
    }
});

//  SHOW DASHBOARD: HI·ªÇN TH·ªä GIAO DI·ªÜN CH√çNH SAU LOGIN
function showDashboard() {
    // HIDE: Auth screens
    document.getElementById('auth-container').style.display = 'none';
    
    // SHOW: Main dashboard
    document.getElementById('dashboard').style.display = 'flex';
    
    // SETUP: Menu navigation
    setupMenu();
    
    // SETUP: Logout button
    document.getElementById('logout').addEventListener('click', (e) => {
        e.preventDefault();                          // NGƒÇN: Default link behavior
        Auth.logout();                               // CALL: Clear session
        location.reload();                           // RELOAD: Back to login
    });
    
    console.log('‚úÖ Dashboard loaded');
}

//  SETUP MENU: CLICK MENU ‚Üí LOAD MODULE T∆Ø∆†NG ·ª®NG
function setupMenu() {
    // GET: T·∫•t c·∫£ menu links c√≥ data-module attribute
    const links = document.querySelectorAll('#sidebar a[data-module]');
    
    links.forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();                      // NGƒÇN: Page jump
            
            // GET: Module name t·ª´ data attribute
            const moduleName = link.dataset.module;
            
            // UI: Active state cho menu
            document.querySelectorAll('#sidebar a').forEach(l => l.classList.remove('active'));
            link.classList.add('active');
            
            // LOAD: Module t∆∞∆°ng ·ª©ng
            loadModule(moduleName);
        });
    });
    
    console.log('‚úÖ Menu setup complete');
}

//  LOAD MODULE: CORE ROUTING FUNCTION
function loadModule(moduleName) {
    console.log('Loading module:', moduleName);
    
    // GET: Main content area
    const mainContent = document.getElementById('main-content');
    mainContent.innerHTML = '';                      // CLEAR: N·ªôi dung c≈©
    
    // CHECK: Module t·ªìn t·∫°i?
    if (!modules[moduleName] || typeof modules[moduleName].init !== 'function') {
        // ERROR: Module kh√¥ng t·ªìn t·∫°i
        mainContent.innerHTML = `<p>Module ${moduleName} kh√¥ng t·ªìn t·∫°i!</p>`;
        console.error('‚ùå Module not found:', moduleName);
        return;
    }
    
    try {
        // CALL: Module.init(container) ‚Üí Render UI
        modules[moduleName].init(mainContent);
        console.log('‚úÖ Module loaded:', moduleName);
    } catch (error) {
        // ERROR HANDLING: Hi·ªÉn th·ªã l·ªói user-friendly
        console.error('‚ùå Error loading module:', moduleName, error);
        mainContent.innerHTML = `<p>L·ªói: ${error.message}</p>`;
    }
}

//  EXPORT: REFRESH DASHBOARD - D√ôNG TRONG C√ÅC MODULE
// FIXED: H√†m n√†y cho ph√©p module t·ª± refresh khi data thay ƒë·ªïi
export function refreshDashboard() {
    // T√åM: Menu item ƒëang active
    const activeLink = document.querySelector('#sidebar a.active');
    if (activeLink) {
        // RELOAD: Module hi·ªán t·∫°i
        loadModule(activeLink.dataset.module);
        console.log('üîÑ Dashboard refreshed');
    }
}

// EXPORT: DEBOUNCE - T·ªêI ·ª®U VALIDATION REAL-TIME
// TR√ÅNH: G·ªçi function qu√° nhi·ªÅu khi user g√µ nhanh
export function debounce(func, delay = 300) {
    let timeout;                                     // STORAGE: Timer ID
    return (...args) => {                            // RETURN: Wrapped function
        clearTimeout(timeout);                       // CLEAR: Timer c≈©
        timeout = setTimeout(() => func(...args), delay); // SET: Timer m·ªõi
    };
}